<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.jgc.study</groupId>
	<artifactId>MyStudy</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<properties>
		<!--指定maven编译的编码格式-->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>

		<!-- 日志依赖 -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>
		<!--cglib-->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>RELEASE</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>RELEASE</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<build>
		<!--
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*</include>
				</includes>
				<excludes>
					<exclude>mavenTest/maven1.xml</exclude>
				</excludes>
			</resource>
		</resources>
		-->



		<plugins>

			<!--次插件可以指定打包的main方法，别且将依赖jar文件也打进来，最总生成一个包含依赖的jar文件-->
			<!--<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<appendAssemblyId>false</appendAssemblyId>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifest>
							&lt;!&ndash; 此处指定main方法入口的class &ndash;&gt;
							<mainClass>com.jgc.study.nio.NIOServer</mainClass>
						</manifest>
					</archive>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>assembly</goal>
						</goals>
					</execution>
				</executions>
			</plugin>-->



			<!--打jar包插件，可以指定排除哪些文件，这些文件不会被打到jar包中-->
<!--			<plugin>-->
<!--				<artifactId>maven-jar-plugin</artifactId>-->
<!--				<version>2.4</version>-->
<!--				<configuration>-->
<!--					<excludes>-->
<!--						&lt;!&ndash;排除所有的xml文件&ndash;&gt;-->
<!--						<exclude>**/*.xml</exclude>-->
<!--						&lt;!&ndash;排除所有的properties文件&ndash;&gt;-->
<!--						<exclude>**/*.properties</exclude>-->
<!--					</excludes>-->
<!--					<archive>-->
<!--						<manifest>-->
<!--							<mainClass>com.jgc.study.nio.NIOServer</mainClass>-->
<!--						</manifest>-->
<!--					</archive>-->
<!--				</configuration>-->
<!--			</plugin>-->


<!--			&lt;!&ndash;打包时将依赖复制到指定目录&ndash;&gt;-->
<!--			<plugin>-->
<!--				<artifactId>maven-dependency-plugin</artifactId>-->
<!--				<executions>-->
<!--					<execution>-->
<!--						<goals>-->
<!--							&lt;!&ndash;copy-dependencies表示复制依赖到指定的目录,具体的目录有下面指定&ndash;&gt;-->
<!--							<goal>copy-dependencies</goal>-->
<!--						</goals>-->
<!--					</execution>-->
<!--				</executions>-->
<!--				<configuration>-->
<!--					&lt;!&ndash;指定要复制到哪里&ndash;&gt;-->
<!--					<outputDirectory>target/lib/</outputDirectory>-->
<!--				</configuration>-->
<!--			</plugin>-->


<!--			<plugin>-->
<!--				<artifactId>maven-resources-plugin</artifactId>-->
<!--				<executions>-->
<!--					<execution>-->
<!--						<goals>-->
<!--							&lt;!&ndash;表示拷贝资源文件到某一目录下，具体哪个目录下面指定,默认情况下，资源文件就是src/main/resources-->
<!--							和src/test/resources目录下的文件，也可以通过在build下的resources节点具体指定&ndash;&gt;-->
<!--							<goal>copy-resources</goal>-->
<!--						</goals>-->
<!--					</execution>-->
<!--				</executions>-->
<!--				<configuration>-->
<!--					&lt;!&ndash;指定资源文件要拷贝到哪个目录&ndash;&gt;-->
<!--					<outputDirectory>target/resources/</outputDirectory>-->
<!--				</configuration>-->
<!--			</plugin>-->

			<!--指定maven编译的版本，不知道这里和idea 设置中的 java compiler设置的编译版本的区别是什么
			注意：这里说的java compiler设置不是idea 设置中 module 的language level（不过language level也可以指定版本，
			好多地方指定版本啊）
			可能这里指的是 maven编译后打成jar包，jar包中class文件对应的jdk版本，而idea设置指的是在当前idea环境下运行代码需要
			编译的版本，这些编译后的class文件是在target文件夹下，以上只是猜测-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>


		</plugins>

	</build>
</project>